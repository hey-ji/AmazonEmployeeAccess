
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Basic prep ---------------------------------------------------
> 
> # library
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ recipes      1.0.8
✔ dials        1.2.0     ✔ rsample      1.2.0
✔ dplyr        1.1.3     ✔ tibble       3.2.1
✔ ggplot2      3.4.3     ✔ tidyr        1.3.0
✔ infer        1.0.5     ✔ tune         1.1.2
✔ modeldata    1.2.0     ✔ workflows    1.1.3
✔ parsnip      1.1.1     ✔ workflowsets 1.0.1
✔ purrr        1.0.2     ✔ yardstick    1.2.0
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ purrr::discard() masks scales::discard()
✖ dplyr::filter()  masks stats::filter()
✖ dplyr::lag()     masks stats::lag()
✖ recipes::step()  masks stats::step()
• Use suppressPackageStartupMessages() to eliminate package startup messages
> library(embed)
> library(vroom)

Attaching package: ‘vroom’

The following object is masked from ‘package:yardstick’:

    spec

The following object is masked from ‘package:scales’:

    col_factor

> library(themis)
> 
> # Read in the data
> #setwd("/Users/student/Desktop/STAT348/AmazonEmployeeAccess")
> #amazon_training  <- vroom("/Users/student/Desktop/STAT348/AmazonEmployeeAccess/train.csv")
> amazon_training  <- vroom("./train.csv")
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> #amazon_test <- vroom("/Users/student/Desktop/STAT348/AmazonEmployeeAccess/test.csv")
> amazon_test <- vroom("./test.csv")
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> amazon_training$ACTION <- as.factor(amazon_training$ACTION)
> 
> # Set up a recipe
> my_recipe <- recipe(ACTION~., data=amazon_training) %>%
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
+   step_other(all_nominal_predictors(), threshold = .001) %>% # combines categorical values that occur <5% into an "other" value
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) %>% #target encoding: factors -> numeric
+   step_normalize(all_predictors()) %>%
+   step_smote(all_outcomes(), neighbors=3)
> 
> # apply the recipe to your data
> prep <- prep(my_recipe)
> bake(prep, new_data=amazon_training)
# A tibble: 32,769 × 10
   RESOURCE MGR_ID ROLE_ROLLUP_1 ROLE_ROLLUP_2 ROLE_DEPTNAME ROLE_TITLE
      <dbl>  <dbl>         <dbl>         <dbl>         <dbl>      <dbl>
 1    0.337 -2.96         -0.150        -0.325      -0.101       -0.616
 2    0.337  0.295        -0.150        -1.03        1.10        -0.431
 3    0.337  0.295         1.06          0.890       0.717        1.31 
 4    0.337 -3.03         -0.150        -1.03       -1.34         0.782
 5    0.337  0.295         0.647         1.70        2.11         1.38 
 6    0.337  0.295         0.523         0.495       1.17         0.669
 7   -0.202  0.295        -0.150        -1.03        0.836        0.568
 8    0.337  0.295        -0.150         0.714      -0.208        0.343
 9    0.337  0.295        -0.150        -0.726      -0.00603      0.881
10    0.337  0.295         3.52          2.78        0.460        1.31 
# ℹ 32,759 more rows
# ℹ 4 more variables: ROLE_FAMILY_DESC <dbl>, ROLE_FAMILY <dbl>,
#   ROLE_CODE <dbl>, ACTION <fct>
> bake(prep, new_data=amazon_test)
# A tibble: 58,921 × 9
   RESOURCE MGR_ID ROLE_ROLLUP_1 ROLE_ROLLUP_2 ROLE_DEPTNAME ROLE_TITLE
      <dbl>  <dbl>         <dbl>         <dbl>         <dbl>      <dbl>
 1    0.337  0.295         3.52         2.78           0.460      1.31 
 2    0.337  0.295        -0.150       -0.248          0.295     -1.69 
 3    0.337 -2.92         -0.150       -0.325         -1.08       0.188
 4    0.337  1.26         -0.150       -0.370         -0.879      0.854
 5    0.187  0.295        -0.150       -1.03          -0.806     -2.19 
 6    0.887 -2.93         -0.150       -0.0574        -1.14      -1.71 
 7   -1.74   0.295        -0.150       -1.03           0.836     -0.735
 8   -3.77   0.295        -0.150       -0.325         -0.174     -1.67 
 9    2.67   0.295        -0.887        0.295          1.75       0.867
10    0.337  0.295        -0.150       -0.914         -1.38       0.782
# ℹ 58,911 more rows
# ℹ 3 more variables: ROLE_FAMILY_DESC <dbl>, ROLE_FAMILY <dbl>,
#   ROLE_CODE <dbl>
> 
> 
> # Logistic Regression -----------------------------------------------------
> logistic_regression_mod <- logistic_reg() %>% #Type of model
+   set_engine("glm")
> 
> amazon_workflow <- workflow() %>%
+   add_recipe(my_recipe) %>%
+   add_model(logistic_regression_mod) %>%
+   fit(data = amazon_training) # Fit the workflow
> 
> amazon_predictions <- predict(amazon_workflow,
+                               new_data=amazon_test,
+                               type="prob") %>%
+   bind_cols(amazon_test) %>%
+   rename(ACTION=.pred_1) %>%
+   select(id, ACTION)
> vroom_write(x = amazon_predictions, file = "(Balance)Logistic", delim = ",")
> 
> 
> # Penalized Logistic Regression -------------------------------------------
> penalized_logistic_mod <- logistic_reg(mixture=tune(), penalty=tune()) %>% #Type of model
+   set_engine("glmnet")
> 
> amazon_workflow <- workflow() %>%
+   add_recipe(my_recipe) %>%
+   add_model(penalized_logistic_mod)
> 
> ## Grid of values to tune over
> tuning_grid <- grid_regular(penalty(),
+                             mixture(),
+                             levels = 5) ## L^2 total tuning possibilities
> 
> ## Split data for CV
> folds <- vfold_cv(amazon_training, v = 5, repeats=1)
> 
> ## Run the CV
> CV_results <- amazon_workflow %>%
+   tune_grid(resamples=folds,
+             grid=tuning_grid,
+             metrics=metric_set(roc_auc)) #Or leave metrics NULL, roc_auc, f_meas, sens, recall, spec,22
> # precision, accuracy
> 
> ## Find Best Tuning Parameters
> bestTune <- CV_results %>%
+   select_best("roc_auc")
> 
> ## Finalize the Workflow & fit it
> final_wf <-
+   amazon_workflow %>%
+   finalize_workflow(bestTune) %>%
+   fit(data=amazon_training)
> 
> ## Predict
> amazon_predictions <- final_wf %>%
+   predict(new_data = amazon_test, type="prob") %>%
+   bind_cols(amazon_test) %>%
+   rename(ACTION=.pred_1) %>%
+   select(id, ACTION)
> vroom_write(x = amazon_predictions, file = "(Balance)Penalized", delim = ",")
> 
> 
> # Random Forest -----------------------------------------------------------
> 
> # model for random forest
> my_forest_model <- rand_forest(mtry = tune(),
+                       min_n = tune(),
+                       trees = 500) %>%
+   set_engine("ranger") %>%
+   set_mode("classification")
> 
> # Create a workflow with model & recipe
> amazon_workflow <- workflow() %>%
+   add_recipe(my_recipe) %>%
+   add_model(my_forest_model) %>%
+   fit(data = amazon_training)
Warning messages:
1: tune columns were requested but there were 9 predictors in the data. 9 will be used. 
2: tune samples were requested but there were 61744 rows in the data. 61744 will be used. 
> 
> # Set up grid of tuning values
> tuning_grid <- grid_regular(mtry(range = c(1,ncol(amazon_training)-1)),
+                             min_n(),
+                             levels = 5)
> 
> # Set up K-fold CV
> folds <- vfold_cv(amazon_training, v = 10, repeats=1)
> 
> CV_results <- amazon_workflow %>%
+   tune_grid(resamples=folds,
+             grid=tuning_grid,
+             metrics=metric_set(roc_auc))
