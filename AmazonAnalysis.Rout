
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ recipes      1.0.8
✔ dials        1.2.0     ✔ rsample      1.2.0
✔ dplyr        1.1.3     ✔ tibble       3.2.1
✔ ggplot2      3.4.3     ✔ tidyr        1.3.0
✔ infer        1.0.5     ✔ tune         1.1.2
✔ modeldata    1.2.0     ✔ workflows    1.1.3
✔ parsnip      1.1.1     ✔ workflowsets 1.0.1
✔ purrr        1.0.2     ✔ yardstick    1.2.0
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ purrr::discard() masks scales::discard()
✖ dplyr::filter()  masks stats::filter()
✖ dplyr::lag()     masks stats::lag()
✖ recipes::step()  masks stats::step()
• Learn how to get started at https://www.tidymodels.org/start/
> library(embed)
> library(vroom)

Attaching package: ‘vroom’

The following object is masked from ‘package:yardstick’:

    spec

The following object is masked from ‘package:scales’:

    col_factor

> 
> # Read in the data
> #setwd("/Users/student/Desktop/STAT348/AmazonEmployeeAccess")
> amazon_training  <- vroom("train.csv")
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> amazon_test <- vroom("test.csv")
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> amazon_training$ACTION <- as.factor(amazon_training$ACTION)
> 
> 
> # at least 2 exploratory plots for the amazon data
> # ggplot(amazon, aes(x = ACTION)) +
> #   geom_bar()
> # 
> # ggplot(amazon, aes(x = ROLE_TITLE)) +
> #   geom_bar()
> 
> sorted_counts <- sort(table(amazon_training$ROLE_TITLE), decreasing = T)
> sorted_counts_20 <- head(sorted_counts, 20)
> df_counts_20 <- data.frame(Value = names(sorted_counts_20), Count = sorted_counts_20)
> ggplot(df_counts_20, aes(x = Count.Var1, y = Count.Freq)) +
+   geom_bar(stat = "identity", fill = "skyblue") +
+   coord_flip() +
+   scale_x_discrete(limits = rev(factor(df_counts_20$Value)))
> 
> # create a recipe, prep and bake
> 
> my_recipe <- recipe(ACTION~., data=amazon_training) %>%
+ step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
+   step_other(all_nominal_predictors(), threshold = .001) %>% # combines categorical values that occur <5% into an "other" value
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION))
> 
> prep <- prep(my_recipe)
> bake(prep, new_data=amazon_training)
# A tibble: 32,769 × 10
   RESOURCE MGR_ID ROLE_ROLLUP_1 ROLE_ROLLUP_2 ROLE_DEPTNAME ROLE_TITLE
      <dbl>  <dbl>         <dbl>         <dbl>         <dbl>      <dbl>
 1    -2.72  -5.33         -2.93         -3.08         -3.18      -3.40
 2    -2.72  -2.76         -2.93         -3.43         -2.19      -3.27
 3    -2.72  -2.76         -2.46         -2.47         -2.50      -2.10
 4    -2.72  -5.39         -2.93         -3.43         -4.19      -2.45
 5    -2.72  -2.76         -2.62         -2.07         -1.36      -2.05
 6    -2.72  -2.76         -2.67         -2.67         -2.13      -2.53
 7    -3.03  -2.76         -2.93         -3.43         -2.41      -2.60
 8    -2.72  -2.76         -2.93         -2.56         -3.26      -2.75
 9    -2.72  -2.76         -2.93         -3.28         -3.10      -2.38
10    -2.72  -2.76         -1.51         -1.53         -2.72      -2.10
# ℹ 32,759 more rows
# ℹ 4 more variables: ROLE_FAMILY_DESC <dbl>, ROLE_FAMILY <dbl>,
#   ROLE_CODE <dbl>, ACTION <fct>
> bake(prep, new_data=amazon_test)
# A tibble: 58,921 × 9
   RESOURCE MGR_ID ROLE_ROLLUP_1 ROLE_ROLLUP_2 ROLE_DEPTNAME ROLE_TITLE
      <dbl>  <dbl>         <dbl>         <dbl>         <dbl>      <dbl>
 1    -2.72  -2.76         -1.51         -1.53         -2.72      -2.10
 2    -2.72  -2.76         -2.93         -3.04         -2.85      -4.13
 3    -2.72  -5.30         -2.93         -3.08         -3.98      -2.85
 4    -2.72  -2.00         -2.93         -3.10         -3.81      -2.40
 5    -2.81  -2.76         -2.93         -3.43         -3.75      -4.46
 6    -2.41  -5.31         -2.93         -2.95         -4.03      -4.14
 7    -3.90  -2.76         -2.93         -3.43         -2.41      -3.48
 8    -5.05  -2.76         -2.93         -3.08         -3.24      -4.11
 9    -1.40  -2.76         -3.21         -2.77         -1.66      -2.39
10    -2.72  -2.76         -2.93         -3.37         -4.22      -2.45
# ℹ 58,911 more rows
# ℹ 3 more variables: ROLE_FAMILY_DESC <dbl>, ROLE_FAMILY <dbl>,
#   ROLE_CODE <dbl>
> 
> #setwd("/Users/student/Desktop/STAT348/AmazonEmployeeAccess")
> 
> 
> # Logistic Regression -----------------------------------------------------
> library(tidymodels)
> 
> my_mod <- logistic_reg() %>% #Type of model
+   set_engine("glm")
> 
> amazon_workflow <- workflow() %>%
+ add_recipe(my_recipe) %>%
+ add_model(my_mod) %>%
+ fit(data = amazon_training) # Fit the workflow
> 
> amazon_predictions <- predict(amazon_workflow,
+                               new_data=amazon_test,
+                               type="prob") %>%
+                       bind_cols(amazon_test) %>%
+                       rename(ACTION=.pred_1) %>%
+                       select(id, ACTION)
> vroom_write(x = amazon_predictions, file = "amazonlogisticregression2.csv", delim = ",")
> getwd()
[1] "/home/khj2488/AmazonEmployeeAccess"
> 
> # Penalized Logistic Regression -------------------------------------------
> 
> library(tidymodels)
> 
> my_mod <- logistic_reg(mixture=tune(), penalty=tune()) %>% #Type of model
+   set_engine("glmnet")
> 
> amazon_workflow <- workflow() %>%
+ add_recipe(my_recipe) %>%
+ add_model(my_mod)
> 
> ## Grid of values to tune over
> tuning_grid <- grid_regular(penalty(),
+                             mixture(),
+                             levels = 5) ## L^2 total tuning possibilities
> 
> ## Split data for CV
> folds <- vfold_cv(amazon_training, v = 5, repeats=1)
> 
> ## Run the CV
> CV_results <- amazon_workflow %>%
+ tune_grid(resamples=folds,
+           grid=tuning_grid,
+           metrics=metric_set(roc_auc)) #Or leave metrics NULL, roc_auc, f_meas, sens, recall, spec,22
> # precision, accuracy
> 
> ## Find Best Tuning Parameters
> bestTune <- CV_results %>%
+ select_best("roc_auc")
> 
> ## Finalize the Workflow & fit it
> final_wf <-
+   amazon_workflow %>%
+ finalize_workflow(bestTune) %>%
+ fit(data=amazon_training)
> 
> ## Predict
> amazon_predictions <- final_wf %>%
+   predict(new_data = amazon_test, type="prob") %>%
+   bind_cols(amazon_test) %>%
+   rename(ACTION=.pred_1) %>%
+   select(id, ACTION)
> vroom_write(x = amazon_predictions, file = "penalized", delim = ",")
> 
> # save(file = "filename.RData" , list = c("LogRge_wf"))
> # load("filename.RData")
> 
> 
> proc.time()
   user  system elapsed 
337.091   1.698 163.306 
